<Activity mc:Ignorable="sap sap2010" x:Class="KillProcessPerUser" this:KillProcessPerUser.Processes_Filepath="KillProcesses.list" this:KillProcessPerUser.Process_ExcludeList="[{&quot;&quot;}]" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:p="http://schemas.microsoft.com/workflow/2012/07/xaml/activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:sd="clr-namespace:System.Diagnostics;assembly=System" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="Filepath of text file used for list of applications to hard kill per user. Any text-based extension should work." Name="Processes_Filepath" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="List of processes to kill from either text file or array" Name="Process_KillList" Type="InArgument(s:String[])" />
    <x:Property sap2010:Annotation.AnnotationText="List of processes to exclude from killing" Name="Process_ExcludeList" Type="InArgument(s:String[])" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>645,2398</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>processkillforusersample_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Security.Principal</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.Web</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Configuration.Install</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Web</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Services.Common</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <sap:WorkflowViewStateService.ViewState>
    <scg:Dictionary x:TypeArguments="x:String, x:Object">
      <x:Boolean x:Key="ShouldCollapseAll">False</x:Boolean>
      <x:Boolean x:Key="ShouldExpandAll">True</x:Boolean>
    </scg:Dictionary>
  </sap:WorkflowViewStateService.ViewState>
  <Sequence sap2010:Annotation.AnnotationText="//// Description:&#xA;Script is used to Hard Kill all desired application processes in order to restore a clean environment and session&#xA;&#xA;List of Processes to kill is stored in either the KillProcesses.list text file or Process_KillList array. If array is empty, default text file will be used.&#xA;&#xA;If &quot;explorer&quot; is found in the list, this will close the taskbar so script contains additional programming to re-start that process until the taskbar is visible&#xA;&#xA;//// Arguments:&#xA;Processes_Filepath =&gt; location of processes to be killed if Process_KillList is empty&#xA;Process_ExcludeList =&gt; if desired, processes can be excluded from the kill list&#xA;Process_KillList =&gt; choice to list processes to be killed instead of using a text file&#xA;&#xA;//////////////////////////////////////////////Enhanced//By//Clayton//Marischen///////" DisplayName="Hard Kill Processes" sap:VirtualizedContainerService.HintSize="625,2338" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Int32" sap2010:Annotation.AnnotationText="Used to only access the processes associated with the currently logged in user session" Name="current_session" />
      <Variable x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="(not being used) Stores the currently logged on username" Name="current_user" />
      <Variable x:TypeArguments="x:Boolean" sap2010:Annotation.AnnotationText="If True, then &quot;explorer&quot; is in arrKill_list and will be started again which is required for the Taskbar" Name="boolExplorer" />
      <Variable x:TypeArguments="sd:Process[]" sap2010:Annotation.AnnotationText="Stores filtered list of Processes to kill associated with session id and is located in arrKill_list" Name="process_list" />
      <Variable x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="Stores the string representation of the list of processes from the text file" Name="strKill_list" />
      <Variable x:TypeArguments="x:Boolean" sap2010:Annotation.AnnotationText="Boolean to identify if element exists" Name="boolElement" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Assign sap2010:Annotation.AnnotationText="Get currently logged on user session id number" DisplayName="Assign Current Session Id" sap:VirtualizedContainerService.HintSize="583,102" sap2010:WorkflowViewState.IdRef="Assign_5">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Int32">[current_session]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Int32">[System.Diagnostics.Process.GetCurrentProcess.SessionId]</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <If sap2010:Annotation.AnnotationText="If KillList is empty, then get list of process names from text file" Condition="[Process_KillList is Nothing]" DisplayName="If - Process_KillList is empty, Read Text File" sap:VirtualizedContainerService.HintSize="583,503" sap2010:WorkflowViewState.IdRef="If_5">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence DisplayName="Read Text File Sequence" sap:VirtualizedContainerService.HintSize="376,324" sap2010:WorkflowViewState.IdRef="Sequence_16">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:ReadTextFile sap2010:Annotation.AnnotationText="Get list of Processes to Kill located in text file" Content="[strKill_list]" DisplayName="Read text file - Kill List" FileName="[Processes_Filepath]" sap:VirtualizedContainerService.HintSize="334,132" sap2010:WorkflowViewState.IdRef="ReadTextFile_1">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:ReadTextFile>
          <Assign sap2010:Annotation.AnnotationText="Convert string to an array of items and remove end spaces" DisplayName="Assign Kill List Array" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_8">
            <Assign.To>
              <OutArgument x:TypeArguments="s:String[]">[Process_KillList]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="s:String[]">[strKill_list.Trim.Split(vblf(0)).Where(Function(line) not line.StartsWith("#")).Select(Function(line) line.Trim).ToArray()]</InArgument>
            </Assign.Value>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </Assign>
        </Sequence>
      </If.Then>
    </If>
    <Assign sap2010:Annotation.AnnotationText="Filter down all open processes by the session id and the list of processes from text file" DisplayName="Filter Processes to Kill" sap:VirtualizedContainerService.HintSize="583,117" sap2010:WorkflowViewState.IdRef="Assign_7">
      <Assign.To>
        <OutArgument x:TypeArguments="sd:Process[]">[process_list]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="sd:Process[]">[Process.GetProcesses.AsEnumerable.Where(Function(item) item.SessionId = current_session and Array.IndexOf(Process_KillList,item.ProcessName)&gt;-1).ToArray()]</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <Assign sap2010:Annotation.AnnotationText="not being used" DisplayName="Assign Current User Name" sap:VirtualizedContainerService.HintSize="583,91" sap2010:WorkflowViewState.IdRef="Assign_4">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[current_user]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[System.Security.Principal.WindowsIdentity.GetCurrent().Name.Replace("Servername\","")]</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <Assign sap2010:Annotation.AnnotationText="If &quot;explorer&quot; is found then set to True in order to perform additional tasks to reopen the process" DisplayName="Assign True If explorer is in list" sap:VirtualizedContainerService.HintSize="583,117" sap2010:WorkflowViewState.IdRef="Assign_6">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Boolean">[boolExplorer]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Boolean">[If(Array.IndexOf(Process_KillList,"explorer")&gt;-1 and Array.IndexOf(Process_ExcludeList,"explorer") = -1,True,False)]</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="583,51" sap2010:WorkflowViewState.IdRef="CommentOut_1">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="272,153" sap2010:WorkflowViewState.IdRef="Sequence_17">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <WriteLine sap2010:Annotation.AnnotationText="Output information of all available process names" DisplayName="Write line Processes" sap:VirtualizedContainerService.HintSize="230,61" sap2010:WorkflowViewState.IdRef="WriteLine_13" Text="[&quot;__________&quot;+vblf+&quot;AVAILABLE PROCESSES:&quot;+vblf+String.Join(vblf,Process.GetProcesses.AsEnumerable.Where(Function(item) item.SessionId = current_session).Select(Function(item) item.ProcessName))+vblf+&quot;__________&quot;]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </WriteLine>
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
    <ui:ForEach x:TypeArguments="sd:Process" CurrentIndex="{x:Null}" sap2010:Annotation.AnnotationText="Loop through filtered process list in order to kill each process" DisplayName="For each Process" sap:VirtualizedContainerService.HintSize="583,530" sap2010:WorkflowViewState.IdRef="ForEach`1_2" Values="[process_list]">
      <ui:ForEach.Body>
        <ActivityAction x:TypeArguments="sd:Process">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="sd:Process" Name="item" />
          </ActivityAction.Argument>
          <If Condition="[Array.IndexOf(Process_ExcludeList,item.ProcessName) = -1]" DisplayName="If - not in Exclude List" sap:VirtualizedContainerService.HintSize="545,365" sap2010:WorkflowViewState.IdRef="If_6">
            <If.Then>
              <Sequence DisplayName="Kill Process Sequence" sap:VirtualizedContainerService.HintSize="271,217" sap2010:WorkflowViewState.IdRef="Sequence_14">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <WriteLine sap2010:Annotation.AnnotationText="Output information on which processes are being killed" DisplayName="Write line - Kill" sap:VirtualizedContainerService.HintSize="229.333333333333,62.6666666666667" sap2010:WorkflowViewState.IdRef="WriteLine_10" Text="[&quot;Killing... &quot;+item.ProcessName]">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </WriteLine>
                <ui:KillProcess Process="{x:Null}" ContinueOnError="True" DisplayName="Kill process" sap:VirtualizedContainerService.HintSize="229.333333333333,22" sap2010:WorkflowViewState.IdRef="KillProcess_4" ProcessName="[item.ProcessName]" />
              </Sequence>
            </If.Then>
            <If.Else>
              <WriteLine sap2010:Annotation.AnnotationText="Output information on which processes are being excluded" DisplayName="Write line - Exclude" sap:VirtualizedContainerService.HintSize="229.333333333333,62.6666666666667" sap2010:WorkflowViewState.IdRef="WriteLine_16" Text="[&quot;Excluding... &quot;+item.ProcessName]">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </WriteLine>
            </If.Else>
          </If>
        </ActivityAction>
      </ui:ForEach.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:ForEach>
    <If sap2010:Annotation.AnnotationText="Additional tasks to re-start the explorer process if it was killed, required for the taskbar" Condition="[boolExplorer]" DisplayName="If boolExplorer is True then Start explorer again" sap:VirtualizedContainerService.HintSize="583.333333333333,114.666666666667" sap2010:WorkflowViewState.IdRef="If_2">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence DisplayName="Fix explorer process" sap:VirtualizedContainerService.HintSize="530,1106" sap2010:WorkflowViewState.IdRef="Sequence_8">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:Boolean" sap2010:Annotation.AnnotationText="Used to check if window exists, in this case, Windows Explorer" Default="False" Name="boolExists" />
          </Sequence.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:RetryScope sap2010:Annotation.AnnotationText="Retry the starting of &quot;explorer&quot; if it fails to load" ContinueOnError="True" DisplayName="Retry scope until Taskbar is visible" sap:VirtualizedContainerService.HintSize="508,982" sap2010:WorkflowViewState.IdRef="RetryScope_1" NumberOfRetries="10" RetryInterval="00:00:01">
            <ui:RetryScope.ActivityBody>
              <ActivityAction>
                <Sequence DisplayName="Start explorer Action" sap:VirtualizedContainerService.HintSize="486,774" sap2010:WorkflowViewState.IdRef="Sequence_11">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If sap2010:Annotation.AnnotationText="Only Start explorer if taskbar is not visible" Condition="[not boolExists]" DisplayName="If explorer is not running" sap:VirtualizedContainerService.HintSize="464,650" sap2010:WorkflowViewState.IdRef="If_4">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Then>
                      <Sequence DisplayName="Start explorer Sequence" sap:VirtualizedContainerService.HintSize="336,503" sap2010:WorkflowViewState.IdRef="Sequence_15">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ui:StartProcess Arguments="{x:Null}" WorkingDirectory="{x:Null}" DisplayName="Start explorer process" FileName="C:\Windows\explorer.exe" sap:VirtualizedContainerService.HintSize="314,87" sap2010:WorkflowViewState.IdRef="StartProcess_1" />
                        <ui:CloseApplication sap2010:Annotation.AnnotationText="Close Windows Explorer window if Starting explorer opens an instance of it" ContinueOnError="True" DisplayName="Close Explorer Window application" sap:VirtualizedContainerService.HintSize="314,106" sap2010:WorkflowViewState.IdRef="CloseApplication_1">
                          <ui:CloseApplication.Target>
                            <ui:Target ClippingRegion="{x:Null}" Element="{x:Null}" InformativeScreenshot="93d52088be9b7583a15331bff9371213" Selector="&lt;wnd app='explorer.exe' cls='CabinetWClass' title='*' /&gt;" TimeoutMS="5000" WaitForReady="INTERACTIVE" />
                          </ui:CloseApplication.Target>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:CloseApplication>
                        <ui:UiElementExists sap2010:Annotation.AnnotationText="Look for taskbar in order to retry explorer start" DisplayName="Element Exists 'MSTaskListWClass'" Exists="[boolExists]" sap:VirtualizedContainerService.HintSize="314,106" sap2010:WorkflowViewState.IdRef="UiElementExists_1">
                          <ui:UiElementExists.Target>
                            <ui:Target ClippingRegion="{x:Null}" Element="{x:Null}" InformativeScreenshot="cd32c5f959064e00eb0478c131045264" Selector="&lt;wnd app='explorer.exe' cls='Shell_TrayWnd' /&gt;" TimeoutMS="2000" WaitForReady="INTERACTIVE" />
                          </ui:UiElementExists.Target>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:UiElementExists>
                      </Sequence>
                    </If.Then>
                  </If>
                </Sequence>
              </ActivityAction>
            </ui:RetryScope.ActivityBody>
            <ui:RetryScope.Condition>
              <ActivityFunc x:TypeArguments="x:Boolean">
                <p:IsTrue sap2010:Annotation.AnnotationText="Retry if taskbar is not visible" DisplayName="Is true - explorerExists" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="IsTrue_1" Input="[boolExists]">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </p:IsTrue>
              </ActivityFunc>
            </ui:RetryScope.Condition>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:RetryScope>
        </Sequence>
      </If.Then>
    </If>
    <WriteLine DisplayName="Write line - Complete" sap:VirtualizedContainerService.HintSize="583.333333333333,62.6666666666667" sap2010:WorkflowViewState.IdRef="WriteLine_15" Text="&gt;&gt;&gt; KILLPROCESSES COMPLETE &gt;&gt;&gt;&gt;&gt;&gt;&gt;" />
  </Sequence>
</Activity>